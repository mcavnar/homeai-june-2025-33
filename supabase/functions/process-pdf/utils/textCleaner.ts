
// Text cleaning and filtering utility
export const cleanExtractedText = (rawText: string): string => {
  console.log('Starting text cleaning. Original length:', rawText.length);
  
  let cleanedText = rawText;
  
  // Remove binary/garbled characters and non-printable characters
  cleanedText = cleanedText.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]/g, '');
  
  // Remove common PDF artifacts and metadata more aggressively
  cleanedText = cleanedText.replace(/(?:Producer|Creator|CreationDate|ModDate|Title|Subject|Keywords):\s*[^\n]*/gi, '');
  cleanedText = cleanedText.replace(/(?:Font|Encoding|Length|Filter|Width|Height|BitsPerComponent):\s*[^\n]*/gi, '');
  
  // Split into lines for line-by-line filtering
  const lines = cleanedText.split('\n');
  const filteredLines = lines.filter(line => {
    const trimmedLine = line.trim();
    
    // Skip empty lines or lines with only whitespace
    if (trimmedLine.length === 0) return false;
    
    // Remove page headers/footers patterns more aggressively
    if (/^page\s+\d+(\s+of\s+\d+)?$/i.test(trimmedLine)) return false;
    if (/^\d+\s*$/.test(trimmedLine) && trimmedLine.length < 4) return false;
    
    // Remove navigation and formatting more efficiently
    if (/^(table of contents|index|contents|continued|see page|page \d+)$/i.test(trimmedLine)) return false;
    
    // Streamlined header/footer removal
    if (/^(home inspection|inspection report|property inspection)/i.test(trimmedLine) && trimmedLine.length < 80) return false;
    if (/^(report date|inspection date|client|inspector)/i.test(trimmedLine) && trimmedLine.length < 100) return false;
    
    // Remove legal text more efficiently
    if (/copyright|Â©|\(c\)|all rights reserved|proprietary|confidential|liability|warranty|disclaimer|limitation/i.test(trimmedLine)) return false;
    
    // Remove contact info
    if (/^(phone|tel|fax|email|website|www\.|http)/i.test(trimmedLine)) return false;
    if (/\b\d{3}[-.)]\s*\d{3}[-.)]\s*\d{4}\b/.test(trimmedLine) && trimmedLine.length < 50) return false;
    
    // Remove formatting artifacts
    if (/^[^\w\s]*$/.test(trimmedLine)) return false;
    if (trimmedLine.length > 5 && /^[_\-=.*#]{5,}$/.test(trimmedLine)) return false;
    
    // Remove PDF generation artifacts
    if (/^(generated by|created with|pdf|adobe)/i.test(trimmedLine) && trimmedLine.length < 50) return false;
    
    // Preserve important inspection content
    if (/\b(defect|repair|recommend|safety|issue|concern|damage|replace|inspect|condition|system|electrical|plumbing|hvac|roof|foundation)\b/i.test(trimmedLine)) return true;
    
    // Remove very short lines that are likely artifacts
    if (trimmedLine.length < 3) return false;
    
    return true;
  });
  
  // Rejoin and clean whitespace more efficiently
  cleanedText = filteredLines.join('\n');
  cleanedText = cleanedText.replace(/\n{3,}/g, '\n\n');
  cleanedText = cleanedText.replace(/[ \t]{2,}/g, ' ');
  cleanedText = cleanedText.trim();
  
  const reductionPercentage = ((rawText.length - cleanedText.length) / rawText.length * 100);
  
  console.log('Text cleaning completed. Cleaned length:', cleanedText.length);
  console.log('Size reduction:', reductionPercentage.toFixed(1) + '%');
  
  // Adjusted fallback threshold to 85% for more aggressive cleaning
  if (reductionPercentage > 85) {
    console.log('WARNING: Text reduction too aggressive, using lighter cleaning');
    let lightCleaning = rawText;
    lightCleaning = lightCleaning.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]/g, '');
    lightCleaning = lightCleaning.replace(/\n{3,}/g, '\n\n');
    lightCleaning = lightCleaning.replace(/[ \t]{2,}/g, ' ');
    return lightCleaning.trim();
  }
  
  return cleanedText;
};
