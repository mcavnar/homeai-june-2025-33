// Text cleaning and filtering utility
export const cleanExtractedText = (rawText: string): string => {
  console.log('Starting text cleaning. Original length:', rawText.length);
  
  let cleanedText = rawText;
  
  // Remove binary/garbled characters and non-printable characters
  cleanedText = cleanedText.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]/g, '');
  
  // Split into lines for line-by-line filtering
  const lines = cleanedText.split('\n');
  const filteredLines = lines.filter(line => {
    const trimmedLine = line.trim();
    
    // Skip empty lines or lines with only whitespace
    if (trimmedLine.length === 0) return false;
    
    // Remove standalone page numbers and simple navigation
    if (/^page\s+\d+(\s+of\s+\d+)?$/i.test(trimmedLine)) return false;
    if (/^\d+\s*$/.test(trimmedLine) && trimmedLine.length < 4) return false;
    
    // Remove exact navigation matches only
    if (/^(table of contents|index|contents)$/i.test(trimmedLine)) return false;
    if (/^(continued|see page|page \d+)$/i.test(trimmedLine)) return false;
    
    // Remove short header/footer patterns (but preserve section headers)
    if (/^(home inspection|inspection report|property inspection)$/i.test(trimmedLine)) return false;
    if (/^(report date|inspection date|client|inspector)$/i.test(trimmedLine) && trimmedLine.length < 50) return false;
    
    // Remove copyright and legal disclaimers (longer patterns)
    if (/copyright|©|\(c\)|all rights reserved|proprietary|confidential/i.test(trimmedLine)) return false;
    if (/this report|liability|warranty|disclaimer|limitation/i.test(trimmedLine) && trimmedLine.length > 150) return false;
    
    // Remove contact information patterns
    if (/^(phone|tel|fax|email|website|www\.|http)/i.test(trimmedLine)) return false;
    if (/\b\d{3}[-.)]\s*\d{3}[-.)]\s*\d{4}\b/.test(trimmedLine) && trimmedLine.length < 50) return false;
    
    // Remove lines that are mostly special characters or formatting
    if (/^[^\w\s]*$/.test(trimmedLine)) return false;
    if (trimmedLine.length > 5 && /^[_\-=.*#]{5,}$/.test(trimmedLine)) return false;
    
    // Remove common PDF generation artifacts
    if (/^(generated by|created with|pdf|adobe)/i.test(trimmedLine) && trimmedLine.length < 50) return false;
    
    // PRESERVE IMPORTANT INSPECTION CONTENT - always keep these lines
    if (/\b(defect|repair|recommend|safety|issue|concern|damage|replace|inspect|condition|system|problem|maintenance|upgrade|install|fix)\b/i.test(trimmedLine)) return true;
    if (/\b(immediate|urgent|high priority|medium priority|low priority|attention|caution|warning)\b/i.test(trimmedLine)) return true;
    if (/\b(electrical|plumbing|hvac|roof|foundation|structural|mechanical|interior|exterior)\b/i.test(trimmedLine)) return true;
    if (/\b(kitchen|bathroom|bedroom|living|dining|garage|basement|attic|crawl space)\b/i.test(trimmedLine)) return true;
    
    // Keep lines with measurements, codes, or technical specifications
    if (/\b\d+\s*(inch|ft|feet|amp|volt|psi|degree|°)\b/i.test(trimmedLine)) return true;
    if (/\b(code|standard|regulation|requirement|specification)\b/i.test(trimmedLine)) return true;
    
    return true;
  });
  
  // Rejoin the filtered lines
  cleanedText = filteredLines.join('\n');
  
  // Remove excessive whitespace but preserve paragraph structure
  cleanedText = cleanedText.replace(/\n{4,}/g, '\n\n\n'); // Replace 4+ line breaks with 3
  cleanedText = cleanedText.replace(/[ \t]{2,}/g, ' '); // Replace multiple spaces/tabs with single space
  
  cleanedText = cleanedText.trim();
  
  const reductionPercentage = ((rawText.length - cleanedText.length) / rawText.length * 100);
  
  console.log('Text cleaning completed. Cleaned length:', cleanedText.length);
  console.log('Size reduction:', reductionPercentage.toFixed(1) + '%');
  console.log('First 500 characters of cleaned text:', cleanedText.substring(0, 500));
  
  // Only use fallback if reduction is extreme (>85%) 
  if (reductionPercentage > 85) {
    console.log('WARNING: Text reduction too aggressive, using lighter cleaning');
    let lightCleaning = rawText;
    lightCleaning = lightCleaning.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]/g, '');
    lightCleaning = lightCleaning.replace(/\n{4,}/g, '\n\n\n');
    lightCleaning = lightCleaning.replace(/[ \t]{2,}/g, ' ');
    return lightCleaning.trim();
  }
  
  return cleanedText;
};
